# if not running interactively, don't do anything
[ -z "$PS1" ] && return

pathappend() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

# additional local path (Linux)
if [ -d ~/.local/bin ]; then
  pathappend ~/.local/bin
fi

# ruby gems path
if which ruby >/dev/null 2>&1 && which gem >/dev/null 2>&1; then
  pathappend "$(ruby -e 'puts Gem.user_dir')/bin"
fi

# golang
if [ -n "$GOPATH" ]; then
  pathappend $GOPATH
fi

# additional npm path (Linux)
if [ -d ~/.local/share/npm/bin ]; then
  pathappend ~/.local/share/npm/bin/
fi

export PATH

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# aliases
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

if [ -f /usr/share/bash-completion/bash_completion ] && ! shopt -oq posix; then
    . /usr/share/bash-completion/bash_completion
fi

if [ -x "$(command -v starship)" ]; then
  unset PROMPT_COMMAND
  eval "$(starship init bash)"
fi

# clear the command cache so that atuin, etc. works properly
hash -r

[ -f "$HOME/.cargo/env" ] && . "$HOME/.cargo/env"
[ -f "$HOME/.atuin/bin/env" ] && . "$HOME/.atuin/bin/env"

which atuin >/dev/null && eval "$(atuin init bash --disable-up-arrow)"
which invoke >/dev/null && eval "$(invoke --print-completion-script=bash)"
which pipx >/dev/null && eval "$(register-python-argcomplete pipx)"
which flux >/dev/null && . <(flux completion bash)
which kubectl >/dev/null && . <(kubectl completion bash)
